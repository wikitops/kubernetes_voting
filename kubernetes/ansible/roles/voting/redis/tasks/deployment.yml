---

- name: VOTING APP REDIS | Manage Deployment
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ redis_service_name }}"
        namespace: "{{ app_namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            name: "{{ redis_service_name }}"
        strategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        template:
          metadata:
            labels:
              name: "{{ redis_service_name }}"
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: name
                      operator: In
                      values:
                      - db
                  topologyKey: "kubernetes.io/hostname"
            containers:
              - env:
                  - name: REDIS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        key: redis-password
                        name: "{{ redis_service_name }}"
                image: centos/postgresql-96-centos7
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  tcpSocket:
                    port: "{{ redis_service_name }}"
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: "{{ redis_service_name }}"
                ports:
                  - name: "{{ redis_service_name }}"
                    containerPort: 6379
                    protocol: TCP
                readinessProbe:
                  tcpSocket:
                    port: "{{ redis_service_name }}"
                  initialDelaySeconds: 5
                  periodSeconds: 10
                securityContext:
                  capabilities: {}
                  privileged: false
                volumeMounts:
                  - mountPath: /var/lib/postgresql
                    name: "{{ redis_service_name }}-data"
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            terminationGracePeriodSeconds: 30
            volumes:
              - name: "{{ redis_service_name }}-data"
                persistentVolumeClaim:
                  claimName: "{{ redis_service_name }}"
